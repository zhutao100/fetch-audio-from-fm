#!/usr/bin/ruby

require 'fileutils'
require 'json'
require 'oga'
require 'open-uri'
require 'open3'
require 'os'
require 'thread'

def fetch_sound_list(url)
  puts 'fetching sound list...'

  body = open(url).read
  document = Oga.parse_html(body)
  h2s = document.xpath('//div[contains(@class, "head")]/h2')
  if h2s.length == 0
    raise "can not fetch h2 contains album count"
  end

  album_count = nil
  h2s.each do |h2|
    match = /\((\d+)\)/.match(h2.text)
    if match
      album_count = match[1]
      break
    end
  end

  if not album_count
    raise "cannot fetch album count"
  end

  page_size = album_count.to_i / 30 + 1
  array = []

  for i in 1..page_size
    body = open(url + 'p' + i.to_s + '/').read
    document = Oga.parse_html(body)
    as = document.xpath('//div[contains(@class, "_OO") and contains(@class, "text")]/a')
    array += as.each_with_index.map{ |a,i| [a.get('title').match(/^\d/) ? a.get('title') : sprintf("%02d%s", i+1, a.get('title')), JSON.parse(open('http://www.ximalaya.com/tracks/' + a.get('href').gsub(/^.*\//,'') + '.json').read)['play_path_32']] }.map{ |elem| [elem[0].gsub(/[\s\(\)\"\'\\\/-]/, '').gsub(/\.mp3$/, ''), elem[1]] }
  end
  return Hash[array]
end

def fetch_audio_url(id, name)
  return if File.exist?(name + '.mp3') or File.exist?(name + '.m4a')
  puts 'fetching audio url for ' + name + '...'
  body = open('http://www.ximalaya.com/tracks/' + id + '.json').read
  return JSON.parse(body)['play_path_32']
end

def convert_m4a_to_mp3(name)
  if not File.exist?(name + '.mp3') and File.exist?(name + '.m4a')
    puts 'converting ' + name + '...'
    stdout, stderr, status = Open3.capture3('ffmpeg -loglevel 16 -i "' + name + '.m4a" -map 0:a -codec:a libmp3lame -q:a 4 -map_metadata -1 "' + name + '.mp3"')
    if status.success?
      puts 'convert ' + name + ' successfully'
    else
      puts 'convert ' + name + ' failed '
      File.delete(name + '.mp3') if File.exist?(name + '.mp3')
    end
  end
end

def fetch_audio_file(url, name)
  return if File.exist?(name + '.m4a') or File.exist?(name + '.mp3') or url == nil
  puts 'downloading ' + name + '...'
  open(name + '.m4a', 'wb') do |file|
    file << open(url).read
  end
  puts 'download ' + name + ' successfully'
end

def fetch_audio(argv)
  if argv.empty?
    puts "usage: ./ximalaya url [filter] --[extra_arg]"
    exit 1
  end

  inputs = argv.select{|s| not s.start_with? "-" }
  url = inputs[0]
  filter = inputs[1]

  album =""
  albumid = ""
  match = /^https:\/\/www\.ximalaya\.com\/([^\/]+)\/(\d+)/.match(url)
  if match
    album = match[1]
    albumid = match[2]
  else
    raise "url format is not correct"
  end

  args = Hash[ argv.flat_map{|s| s.scan(/--?([^=\s]+)(?:=(\S+))?/) } ]
  puts 'args: ' + args.to_s
  convert_to_mp3 = true if args.key?('convert_to_mp3')

  output_dir = 'ximalaya_' + album + '_' + albumid
  output_dir = args['output_dir'] if args.key?('output_dir')
  puts 'output dir: ' + output_dir
  unless File.directory?(output_dir)
    FileUtils.mkdir_p(output_dir)
  end
  Dir.chdir(output_dir)

  queue = Queue.new
  hash = fetch_sound_list(url)
  hash = hash.select{ |key, value| key.dup.force_encoding('UTF-8').match(/#{filter}/) } if filter
  thread_count = [[OS.cpu_count - 1, 1].max, hash.keys.length].min
  # single thread fetch
  begin
    hash.keys.each do |name|
      url = hash[name]
      fetch_audio_file(url, name)
      queue.push name
    end
  rescue Exception => e
    puts "catch one Exception: " + e.message
    puts e.backtrace
  end
  if convert_to_mp3
    puts 'create ' + thread_count.to_s + ' threads'
    thread_pool = (0...thread_count).map do
      Thread.new do
        begin
          while name = queue.pop
            convert_m4a_to_mp3(name)
          end
        end
      end
    end
    thread_pool.map(&:join)
  end
end

fetch_audio(ARGV)
